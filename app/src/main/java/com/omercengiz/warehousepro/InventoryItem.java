package com.omercengiz.warehousepro;

/**
 * InventoryItem - Data model class for warehouse inventory items
 * Represents a single item in the warehouse inventory system
 */
public class InventoryItem {

    // Database fields
    private int id;
    private String name;
    private double weight;
    private int quantity;
    private String notes;
    private String lastUpdated;

    // Default constructor
    public InventoryItem() {
        this.id = 0;
        this.name = "";
        this.weight = 0.0;
        this.quantity = 0;
        this.notes = "";
        this.lastUpdated = "";
    }

    // Constructor with all fields
    public InventoryItem(int id, String name, double weight, int quantity, String notes, String lastUpdated) {
        this.id = id;
        this.name = name;
        this.weight = weight;
        this.quantity = quantity;
        this.notes = notes;
        this.lastUpdated = lastUpdated;
    }

    // Constructor for creating new items (without ID and timestamp)
    public InventoryItem(String name, double weight, int quantity, String notes) {
        this.id = 0; // Will be auto-generated by database
        this.name = name;
        this.weight = weight;
        this.quantity = quantity;
        this.notes = notes;
        this.lastUpdated = ""; // Will be set by database
    }

    // ================== GETTERS ==================

    /**
     * Get the unique ID of the inventory item
     * @return item ID from database
     */
    public int getId() {
        return id;
    }

    /**
     * Get the name of the inventory item
     * @return item name
     */
    public String getName() {
        return name;
    }

    /**
     * Get the weight of the inventory item
     * @return item weight in pounds
     */
    public double getWeight() {
        return weight;
    }

    /**
     * Get the current quantity of the inventory item
     * @return current quantity in stock
     */
    public int getQuantity() {
        return quantity;
    }

    /**
     * Get additional notes about the inventory item
     * @return notes text or empty string
     */
    public String getNotes() {
        return notes;
    }

    /**
     * Get the last updated timestamp
     * @return last updated date/time
     */
    public String getLastUpdated() {
        return lastUpdated;
    }

    // ================== SETTERS ==================

    /**
     * Set the unique ID of the inventory item
     * @param id item ID from database
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Set the name of the inventory item
     * @param name item name (required)
     */
    public void setName(String name) {
        this.name = name != null ? name : "";
    }

    /**
     * Set the weight of the inventory item
     * @param weight item weight in pounds (must be >= 0)
     */
    public void setWeight(double weight) {
        this.weight = Math.max(0, weight); // Ensure non-negative weight
    }

    /**
     * Set the current quantity of the inventory item
     * @param quantity current quantity in stock (must be >= 0)
     */
    public void setQuantity(int quantity) {
        this.quantity = Math.max(0, quantity); // Ensure non-negative quantity
    }

    /**
     * Set additional notes about the inventory item
     * @param notes notes text (can be null or empty)
     */
    public void setNotes(String notes) {
        this.notes = notes != null ? notes : "";
    }

    /**
     * Set the last updated timestamp
     * @param lastUpdated date/time string
     */
    public void setLastUpdated(String lastUpdated) {
        this.lastUpdated = lastUpdated != null ? lastUpdated : "";
    }

    // ================== UTILITY METHODS ==================

    /**
     * Check if the item is out of stock
     * @return true if quantity is 0, false otherwise
     */
    public boolean isOutOfStock() {
        return quantity == 0;
    }

    /**
     * Check if the item is low in stock (quantity <= 5)
     * @return true if quantity is 5 or less, false otherwise
     */
    public boolean isLowStock() {
        return quantity <= 5;
    }

    /**
     * Increase the quantity by specified amount
     * @param amount amount to add (must be positive)
     * @return new quantity after increase
     */
    public int increaseQuantity(int amount) {
        if (amount > 0) {
            this.quantity += amount;
        }
        return this.quantity;
    }

    /**
     * Decrease the quantity by specified amount
     * @param amount amount to subtract (must be positive)
     * @return new quantity after decrease (minimum 0)
     */
    public int decreaseQuantity(int amount) {
        if (amount > 0) {
            this.quantity = Math.max(0, this.quantity - amount);
        }
        return this.quantity;
    }

    /**
     * Get formatted weight string with units
     * @return formatted weight (e.g., "10.5 lbs")
     */
    public String getFormattedWeight() {
        if (weight == (int) weight) {
            return String.format("%d lbs", (int) weight);
        } else {
            return String.format("%.1f lbs", weight);
        }
    }

    /**
     * Get display text for notes (handles empty notes)
     * @return notes text or "No notes" if empty
     */
    public String getDisplayNotes() {
        return (notes == null || notes.trim().isEmpty()) ? "No notes" : notes;
    }

    /**
     * Get status text based on quantity
     * @return status string ("Out of Stock", "Low Stock", or "In Stock")
     */
    public String getStatusText() {
        if (isOutOfStock()) {
            return "Out of Stock";
        } else if (isLowStock()) {
            return "Low Stock";
        } else {
            return "In Stock";
        }
    }

    /**
     * Check if item data is valid for saving
     * @return true if name is not empty and weight/quantity are non-negative
     */
    public boolean isValid() {
        return name != null && !name.trim().isEmpty() && weight >= 0 && quantity >= 0;
    }

    // ================== OBJECT METHODS ==================

    /**
     * String representation of the inventory item
     * @return formatted string with item details
     */
    @Override
    public String toString() {
        return String.format("InventoryItem{id=%d, name='%s', weight=%.1f, quantity=%d, notes='%s', lastUpdated='%s'}",
                id, name, weight, quantity, notes, lastUpdated);
    }

    /**
     * Check equality with another InventoryItem
     * @param obj object to compare with
     * @return true if items have same ID and are equal
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;

        InventoryItem that = (InventoryItem) obj;
        return id == that.id &&
                Double.compare(that.weight, weight) == 0 &&
                quantity == that.quantity &&
                name.equals(that.name) &&
                notes.equals(that.notes);
    }

    /**
     * Generate hash code for the inventory item
     * @return hash code based on ID and name
     */
    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + (name != null ? name.hashCode() : 0);
        return result;
    }
}